// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SCENE_HXX
#define SCENE_HXX

// Begin prologue.
//
//
// End prologue.

#include <cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long_;
  typedef unsigned long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class sceneInterface;
class tweenInterface;
class cameraInterface;
class colorInterface;
class objectInterface;
class sphereInterface;
class elipsoidInterface;
class planeInterface;
class lightInterface;
class tween;
class type;
class property;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <parallel/algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class sceneInterface: public ::xml_schema::type
{
  public:
  // camera
  // 
  typedef ::cameraInterface camera_type;
  typedef ::xsd::cxx::tree::sequence< camera_type > camera_sequence;
  typedef camera_sequence::iterator camera_iterator;
  typedef camera_sequence::const_iterator camera_const_iterator;
  typedef ::xsd::cxx::tree::traits< camera_type, char > camera_traits;

  const camera_sequence&
  camera () const;

  camera_sequence&
  camera ();

  void
  camera (const camera_sequence& s);

  // light
  // 
  typedef ::lightInterface light_type;
  typedef ::xsd::cxx::tree::sequence< light_type > light_sequence;
  typedef light_sequence::iterator light_iterator;
  typedef light_sequence::const_iterator light_const_iterator;
  typedef ::xsd::cxx::tree::traits< light_type, char > light_traits;

  const light_sequence&
  light () const;

  light_sequence&
  light ();

  void
  light (const light_sequence& s);

  // sphere
  // 
  typedef ::sphereInterface sphere_type;
  typedef ::xsd::cxx::tree::sequence< sphere_type > sphere_sequence;
  typedef sphere_sequence::iterator sphere_iterator;
  typedef sphere_sequence::const_iterator sphere_const_iterator;
  typedef ::xsd::cxx::tree::traits< sphere_type, char > sphere_traits;

  const sphere_sequence&
  sphere () const;

  sphere_sequence&
  sphere ();

  void
  sphere (const sphere_sequence& s);

  // elipsoid
  // 
  typedef ::elipsoidInterface elipsoid_type;
  typedef ::xsd::cxx::tree::sequence< elipsoid_type > elipsoid_sequence;
  typedef elipsoid_sequence::iterator elipsoid_iterator;
  typedef elipsoid_sequence::const_iterator elipsoid_const_iterator;
  typedef ::xsd::cxx::tree::traits< elipsoid_type, char > elipsoid_traits;

  const elipsoid_sequence&
  elipsoid () const;

  elipsoid_sequence&
  elipsoid ();

  void
  elipsoid (const elipsoid_sequence& s);

  // plane
  // 
  typedef ::planeInterface plane_type;
  typedef ::xsd::cxx::tree::sequence< plane_type > plane_sequence;
  typedef plane_sequence::iterator plane_iterator;
  typedef plane_sequence::const_iterator plane_const_iterator;
  typedef ::xsd::cxx::tree::traits< plane_type, char > plane_traits;

  const plane_sequence&
  plane () const;

  plane_sequence&
  plane ();

  void
  plane (const plane_sequence& s);

  // frames
  // 
  typedef ::xml_schema::integer frames_type;
  typedef ::xsd::cxx::tree::traits< frames_type, char > frames_traits;

  const frames_type&
  frames () const;

  frames_type&
  frames ();

  void
  frames (const frames_type& x);

  // width
  // 
  typedef ::xml_schema::integer width_type;
  typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

  const width_type&
  width () const;

  width_type&
  width ();

  void
  width (const width_type& x);

  static width_type
  width_default_value ();

  // height
  // 
  typedef ::xml_schema::integer height_type;
  typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

  const height_type&
  height () const;

  height_type&
  height ();

  void
  height (const height_type& x);

  static height_type
  height_default_value ();

  // w
  // 
  typedef ::xml_schema::float_ w_type;
  typedef ::xsd::cxx::tree::traits< w_type, char > w_traits;

  const w_type&
  w () const;

  w_type&
  w ();

  void
  w (const w_type& x);

  // h
  // 
  typedef ::xml_schema::float_ h_type;
  typedef ::xsd::cxx::tree::traits< h_type, char > h_traits;

  const h_type&
  h () const;

  h_type&
  h ();

  void
  h (const h_type& x);

  // d
  // 
  typedef ::xml_schema::float_ d_type;
  typedef ::xsd::cxx::tree::traits< d_type, char > d_traits;

  const d_type&
  d () const;

  d_type&
  d ();

  void
  d (const d_type& x);

  // bred
  // 
  typedef ::xml_schema::float_ bred_type;
  typedef ::xsd::cxx::tree::traits< bred_type, char > bred_traits;

  const bred_type&
  bred () const;

  bred_type&
  bred ();

  void
  bred (const bred_type& x);

  static bred_type
  bred_default_value ();

  // bgreen
  // 
  typedef ::xml_schema::float_ bgreen_type;
  typedef ::xsd::cxx::tree::traits< bgreen_type, char > bgreen_traits;

  const bgreen_type&
  bgreen () const;

  bgreen_type&
  bgreen ();

  void
  bgreen (const bgreen_type& x);

  static bgreen_type
  bgreen_default_value ();

  // bblue
  // 
  typedef ::xml_schema::float_ bblue_type;
  typedef ::xsd::cxx::tree::traits< bblue_type, char > bblue_traits;

  const bblue_type&
  bblue () const;

  bblue_type&
  bblue ();

  void
  bblue (const bblue_type& x);

  static bblue_type
  bblue_default_value ();

  // glred
  // 
  typedef ::xml_schema::float_ glred_type;
  typedef ::xsd::cxx::tree::traits< glred_type, char > glred_traits;

  const glred_type&
  glred () const;

  glred_type&
  glred ();

  void
  glred (const glred_type& x);

  static glred_type
  glred_default_value ();

  // glgreen
  // 
  typedef ::xml_schema::float_ glgreen_type;
  typedef ::xsd::cxx::tree::traits< glgreen_type, char > glgreen_traits;

  const glgreen_type&
  glgreen () const;

  glgreen_type&
  glgreen ();

  void
  glgreen (const glgreen_type& x);

  static glgreen_type
  glgreen_default_value ();

  // glblue
  // 
  typedef ::xml_schema::float_ glblue_type;
  typedef ::xsd::cxx::tree::traits< glblue_type, char > glblue_traits;

  const glblue_type&
  glblue () const;

  glblue_type&
  glblue ();

  void
  glblue (const glblue_type& x);

  static glblue_type
  glblue_default_value ();

  // Constructors.
  //
  sceneInterface (const frames_type&,
                  const w_type&,
                  const h_type&,
                  const d_type&);

  sceneInterface (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  sceneInterface (const sceneInterface& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual sceneInterface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~sceneInterface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  camera_sequence camera_;
  light_sequence light_;
  sphere_sequence sphere_;
  elipsoid_sequence elipsoid_;
  plane_sequence plane_;
  ::xsd::cxx::tree::one< frames_type > frames_;
  ::xsd::cxx::tree::one< width_type > width_;
  ::xsd::cxx::tree::one< height_type > height_;
  ::xsd::cxx::tree::one< w_type > w_;
  ::xsd::cxx::tree::one< h_type > h_;
  ::xsd::cxx::tree::one< d_type > d_;
  ::xsd::cxx::tree::one< bred_type > bred_;
  ::xsd::cxx::tree::one< bgreen_type > bgreen_;
  ::xsd::cxx::tree::one< bblue_type > bblue_;
  ::xsd::cxx::tree::one< glred_type > glred_;
  ::xsd::cxx::tree::one< glgreen_type > glgreen_;
  ::xsd::cxx::tree::one< glblue_type > glblue_;
};

class tweenInterface: public ::xml_schema::type
{
  public:
  // tween
  // 
  typedef ::tween tween_type;
  typedef ::xsd::cxx::tree::sequence< tween_type > tween_sequence;
  typedef tween_sequence::iterator tween_iterator;
  typedef tween_sequence::const_iterator tween_const_iterator;
  typedef ::xsd::cxx::tree::traits< tween_type, char > tween_traits;

  const tween_sequence&
  tween () const;

  tween_sequence&
  tween ();

  void
  tween (const tween_sequence& s);

  // Constructors.
  //
  tweenInterface ();

  tweenInterface (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  tweenInterface (const tweenInterface& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual tweenInterface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~tweenInterface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  tween_sequence tween_;
};

class cameraInterface: public ::tweenInterface
{
  public:
  // id
  // 
  typedef ::xml_schema::string id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  void
  id (::std::auto_ptr< id_type > p);

  // x
  // 
  typedef ::xml_schema::float_ x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  // 
  typedef ::xml_schema::float_ y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // z
  // 
  typedef ::xml_schema::float_ z_type;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_type&
  z () const;

  z_type&
  z ();

  void
  z (const z_type& x);

  // vx1
  // 
  typedef ::xml_schema::float_ vx1_type;
  typedef ::xsd::cxx::tree::traits< vx1_type, char > vx1_traits;

  const vx1_type&
  vx1 () const;

  vx1_type&
  vx1 ();

  void
  vx1 (const vx1_type& x);

  static vx1_type
  vx1_default_value ();

  // vy1
  // 
  typedef ::xml_schema::float_ vy1_type;
  typedef ::xsd::cxx::tree::traits< vy1_type, char > vy1_traits;

  const vy1_type&
  vy1 () const;

  vy1_type&
  vy1 ();

  void
  vy1 (const vy1_type& x);

  static vy1_type
  vy1_default_value ();

  // vz1
  // 
  typedef ::xml_schema::float_ vz1_type;
  typedef ::xsd::cxx::tree::traits< vz1_type, char > vz1_traits;

  const vz1_type&
  vz1 () const;

  vz1_type&
  vz1 ();

  void
  vz1 (const vz1_type& x);

  static vz1_type
  vz1_default_value ();

  // vx2
  // 
  typedef ::xml_schema::float_ vx2_type;
  typedef ::xsd::cxx::tree::traits< vx2_type, char > vx2_traits;

  const vx2_type&
  vx2 () const;

  vx2_type&
  vx2 ();

  void
  vx2 (const vx2_type& x);

  static vx2_type
  vx2_default_value ();

  // vy2
  // 
  typedef ::xml_schema::float_ vy2_type;
  typedef ::xsd::cxx::tree::traits< vy2_type, char > vy2_traits;

  const vy2_type&
  vy2 () const;

  vy2_type&
  vy2 ();

  void
  vy2 (const vy2_type& x);

  static vy2_type
  vy2_default_value ();

  // vz2
  // 
  typedef ::xml_schema::float_ vz2_type;
  typedef ::xsd::cxx::tree::traits< vz2_type, char > vz2_traits;

  const vz2_type&
  vz2 () const;

  vz2_type&
  vz2 ();

  void
  vz2 (const vz2_type& x);

  static vz2_type
  vz2_default_value ();

  // vx3
  // 
  typedef ::xml_schema::float_ vx3_type;
  typedef ::xsd::cxx::tree::traits< vx3_type, char > vx3_traits;

  const vx3_type&
  vx3 () const;

  vx3_type&
  vx3 ();

  void
  vx3 (const vx3_type& x);

  static vx3_type
  vx3_default_value ();

  // vy3
  // 
  typedef ::xml_schema::float_ vy3_type;
  typedef ::xsd::cxx::tree::traits< vy3_type, char > vy3_traits;

  const vy3_type&
  vy3 () const;

  vy3_type&
  vy3 ();

  void
  vy3 (const vy3_type& x);

  static vy3_type
  vy3_default_value ();

  // vz3
  // 
  typedef ::xml_schema::float_ vz3_type;
  typedef ::xsd::cxx::tree::traits< vz3_type, char > vz3_traits;

  const vz3_type&
  vz3 () const;

  vz3_type&
  vz3 ();

  void
  vz3 (const vz3_type& x);

  static vz3_type
  vz3_default_value ();

  // Constructors.
  //
  cameraInterface (const id_type&,
                   const x_type&,
                   const y_type&,
                   const z_type&);

  cameraInterface (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  cameraInterface (const cameraInterface& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual cameraInterface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~cameraInterface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  ::xsd::cxx::tree::one< z_type > z_;
  ::xsd::cxx::tree::one< vx1_type > vx1_;
  ::xsd::cxx::tree::one< vy1_type > vy1_;
  ::xsd::cxx::tree::one< vz1_type > vz1_;
  ::xsd::cxx::tree::one< vx2_type > vx2_;
  ::xsd::cxx::tree::one< vy2_type > vy2_;
  ::xsd::cxx::tree::one< vz2_type > vz2_;
  ::xsd::cxx::tree::one< vx3_type > vx3_;
  ::xsd::cxx::tree::one< vy3_type > vy3_;
  ::xsd::cxx::tree::one< vz3_type > vz3_;
};

class colorInterface: public ::tweenInterface
{
  public:
  // ared
  // 
  typedef ::xml_schema::float_ ared_type;
  typedef ::xsd::cxx::tree::traits< ared_type, char > ared_traits;

  const ared_type&
  ared () const;

  ared_type&
  ared ();

  void
  ared (const ared_type& x);

  static ared_type
  ared_default_value ();

  // agreen
  // 
  typedef ::xml_schema::float_ agreen_type;
  typedef ::xsd::cxx::tree::traits< agreen_type, char > agreen_traits;

  const agreen_type&
  agreen () const;

  agreen_type&
  agreen ();

  void
  agreen (const agreen_type& x);

  static agreen_type
  agreen_default_value ();

  // ablue
  // 
  typedef ::xml_schema::float_ ablue_type;
  typedef ::xsd::cxx::tree::traits< ablue_type, char > ablue_traits;

  const ablue_type&
  ablue () const;

  ablue_type&
  ablue ();

  void
  ablue (const ablue_type& x);

  static ablue_type
  ablue_default_value ();

  // dred
  // 
  typedef ::xml_schema::float_ dred_type;
  typedef ::xsd::cxx::tree::traits< dred_type, char > dred_traits;

  const dred_type&
  dred () const;

  dred_type&
  dred ();

  void
  dred (const dred_type& x);

  static dred_type
  dred_default_value ();

  // dgreen
  // 
  typedef ::xml_schema::float_ dgreen_type;
  typedef ::xsd::cxx::tree::traits< dgreen_type, char > dgreen_traits;

  const dgreen_type&
  dgreen () const;

  dgreen_type&
  dgreen ();

  void
  dgreen (const dgreen_type& x);

  static dgreen_type
  dgreen_default_value ();

  // dblue
  // 
  typedef ::xml_schema::float_ dblue_type;
  typedef ::xsd::cxx::tree::traits< dblue_type, char > dblue_traits;

  const dblue_type&
  dblue () const;

  dblue_type&
  dblue ();

  void
  dblue (const dblue_type& x);

  static dblue_type
  dblue_default_value ();

  // sred
  // 
  typedef ::xml_schema::float_ sred_type;
  typedef ::xsd::cxx::tree::traits< sred_type, char > sred_traits;

  const sred_type&
  sred () const;

  sred_type&
  sred ();

  void
  sred (const sred_type& x);

  static sred_type
  sred_default_value ();

  // sgreen
  // 
  typedef ::xml_schema::float_ sgreen_type;
  typedef ::xsd::cxx::tree::traits< sgreen_type, char > sgreen_traits;

  const sgreen_type&
  sgreen () const;

  sgreen_type&
  sgreen ();

  void
  sgreen (const sgreen_type& x);

  static sgreen_type
  sgreen_default_value ();

  // sblue
  // 
  typedef ::xml_schema::float_ sblue_type;
  typedef ::xsd::cxx::tree::traits< sblue_type, char > sblue_traits;

  const sblue_type&
  sblue () const;

  sblue_type&
  sblue ();

  void
  sblue (const sblue_type& x);

  static sblue_type
  sblue_default_value ();

  // Constructors.
  //
  colorInterface ();

  colorInterface (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  colorInterface (const colorInterface& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual colorInterface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~colorInterface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ared_type > ared_;
  ::xsd::cxx::tree::one< agreen_type > agreen_;
  ::xsd::cxx::tree::one< ablue_type > ablue_;
  ::xsd::cxx::tree::one< dred_type > dred_;
  ::xsd::cxx::tree::one< dgreen_type > dgreen_;
  ::xsd::cxx::tree::one< dblue_type > dblue_;
  ::xsd::cxx::tree::one< sred_type > sred_;
  ::xsd::cxx::tree::one< sgreen_type > sgreen_;
  ::xsd::cxx::tree::one< sblue_type > sblue_;
};

class objectInterface: public ::colorInterface
{
  public:
  // id
  // 
  typedef ::xml_schema::string id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  void
  id (::std::auto_ptr< id_type > p);

  // x
  // 
  typedef ::xml_schema::float_ x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  // 
  typedef ::xml_schema::float_ y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // z
  // 
  typedef ::xml_schema::float_ z_type;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_type&
  z () const;

  z_type&
  z ();

  void
  z (const z_type& x);

  // n
  // 
  typedef ::xml_schema::integer n_type;
  typedef ::xsd::cxx::tree::traits< n_type, char > n_traits;

  const n_type&
  n () const;

  n_type&
  n ();

  void
  n (const n_type& x);

  static n_type
  n_default_value ();

  // Constructors.
  //
  objectInterface (const id_type&,
                   const x_type&,
                   const y_type&,
                   const z_type&);

  objectInterface (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  objectInterface (const objectInterface& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual objectInterface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~objectInterface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  ::xsd::cxx::tree::one< z_type > z_;
  ::xsd::cxx::tree::one< n_type > n_;
};

class sphereInterface: public ::objectInterface
{
  public:
  // r
  // 
  typedef ::xml_schema::float_ r_type;
  typedef ::xsd::cxx::tree::traits< r_type, char > r_traits;

  const r_type&
  r () const;

  r_type&
  r ();

  void
  r (const r_type& x);

  // Constructors.
  //
  sphereInterface (const id_type&,
                   const x_type&,
                   const y_type&,
                   const z_type&,
                   const r_type&);

  sphereInterface (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  sphereInterface (const sphereInterface& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual sphereInterface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~sphereInterface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< r_type > r_;
};

class elipsoidInterface: public ::objectInterface
{
  public:
  // a
  // 
  typedef ::xml_schema::float_ a_type;
  typedef ::xsd::cxx::tree::traits< a_type, char > a_traits;

  const a_type&
  a () const;

  a_type&
  a ();

  void
  a (const a_type& x);

  // b
  // 
  typedef ::xml_schema::float_ b_type;
  typedef ::xsd::cxx::tree::traits< b_type, char > b_traits;

  const b_type&
  b () const;

  b_type&
  b ();

  void
  b (const b_type& x);

  // c
  // 
  typedef ::xml_schema::float_ c_type;
  typedef ::xsd::cxx::tree::traits< c_type, char > c_traits;

  const c_type&
  c () const;

  c_type&
  c ();

  void
  c (const c_type& x);

  // vx
  // 
  typedef ::xml_schema::float_ vx_type;
  typedef ::xsd::cxx::tree::traits< vx_type, char > vx_traits;

  const vx_type&
  vx () const;

  vx_type&
  vx ();

  void
  vx (const vx_type& x);

  static vx_type
  vx_default_value ();

  // vy
  // 
  typedef ::xml_schema::float_ vy_type;
  typedef ::xsd::cxx::tree::traits< vy_type, char > vy_traits;

  const vy_type&
  vy () const;

  vy_type&
  vy ();

  void
  vy (const vy_type& x);

  static vy_type
  vy_default_value ();

  // vz
  // 
  typedef ::xml_schema::float_ vz_type;
  typedef ::xsd::cxx::tree::traits< vz_type, char > vz_traits;

  const vz_type&
  vz () const;

  vz_type&
  vz ();

  void
  vz (const vz_type& x);

  static vz_type
  vz_default_value ();

  // Constructors.
  //
  elipsoidInterface (const id_type&,
                     const x_type&,
                     const y_type&,
                     const z_type&,
                     const a_type&,
                     const b_type&,
                     const c_type&);

  elipsoidInterface (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  elipsoidInterface (const elipsoidInterface& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual elipsoidInterface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~elipsoidInterface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< a_type > a_;
  ::xsd::cxx::tree::one< b_type > b_;
  ::xsd::cxx::tree::one< c_type > c_;
  ::xsd::cxx::tree::one< vx_type > vx_;
  ::xsd::cxx::tree::one< vy_type > vy_;
  ::xsd::cxx::tree::one< vz_type > vz_;
};

class planeInterface: public ::objectInterface
{
  public:
  // vx
  // 
  typedef ::xml_schema::float_ vx_type;
  typedef ::xsd::cxx::tree::traits< vx_type, char > vx_traits;

  const vx_type&
  vx () const;

  vx_type&
  vx ();

  void
  vx (const vx_type& x);

  static vx_type
  vx_default_value ();

  // vy
  // 
  typedef ::xml_schema::float_ vy_type;
  typedef ::xsd::cxx::tree::traits< vy_type, char > vy_traits;

  const vy_type&
  vy () const;

  vy_type&
  vy ();

  void
  vy (const vy_type& x);

  static vy_type
  vy_default_value ();

  // vz
  // 
  typedef ::xml_schema::float_ vz_type;
  typedef ::xsd::cxx::tree::traits< vz_type, char > vz_traits;

  const vz_type&
  vz () const;

  vz_type&
  vz ();

  void
  vz (const vz_type& x);

  static vz_type
  vz_default_value ();

  // Constructors.
  //
  planeInterface (const id_type&,
                  const x_type&,
                  const y_type&,
                  const z_type&);

  planeInterface (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  planeInterface (const planeInterface& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual planeInterface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~planeInterface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< vx_type > vx_;
  ::xsd::cxx::tree::one< vy_type > vy_;
  ::xsd::cxx::tree::one< vz_type > vz_;
};

class lightInterface: public ::colorInterface
{
  public:
  // id
  // 
  typedef ::xml_schema::string id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  void
  id (::std::auto_ptr< id_type > p);

  // r
  // 
  typedef ::xml_schema::float_ r_type;
  typedef ::xsd::cxx::tree::traits< r_type, char > r_traits;

  const r_type&
  r () const;

  r_type&
  r ();

  void
  r (const r_type& x);

  // x
  // 
  typedef ::xml_schema::float_ x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  // 
  typedef ::xml_schema::float_ y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // z
  // 
  typedef ::xml_schema::float_ z_type;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_type&
  z () const;

  z_type&
  z ();

  void
  z (const z_type& x);

  // Constructors.
  //
  lightInterface (const id_type&,
                  const r_type&,
                  const x_type&,
                  const y_type&,
                  const z_type&);

  lightInterface (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  lightInterface (const lightInterface& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual lightInterface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~lightInterface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< r_type > r_;
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  ::xsd::cxx::tree::one< z_type > z_;
};

class tween: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // property
  // 
  typedef ::property property_type;
  typedef ::xsd::cxx::tree::traits< property_type, char > property_traits;

  const property_type&
  property () const;

  property_type&
  property ();

  void
  property (const property_type& x);

  void
  property (::std::auto_ptr< property_type > p);

  // from
  // 
  typedef ::xml_schema::float_ from_type;
  typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

  const from_type&
  from () const;

  from_type&
  from ();

  void
  from (const from_type& x);

  // to
  // 
  typedef ::xml_schema::float_ to_type;
  typedef ::xsd::cxx::tree::traits< to_type, char > to_traits;

  const to_type&
  to () const;

  to_type&
  to ();

  void
  to (const to_type& x);

  // start
  // 
  typedef ::xml_schema::integer start_type;
  typedef ::xsd::cxx::tree::traits< start_type, char > start_traits;

  const start_type&
  start () const;

  start_type&
  start ();

  void
  start (const start_type& x);

  // end
  // 
  typedef ::xml_schema::integer end_type;
  typedef ::xsd::cxx::tree::traits< end_type, char > end_traits;

  const end_type&
  end () const;

  end_type&
  end ();

  void
  end (const end_type& x);

  // Constructors.
  //
  tween (const type_type&,
         const property_type&,
         const from_type&,
         const to_type&,
         const start_type&,
         const end_type&);

  tween (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  tween (const tween& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual tween*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~tween ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< property_type > property_;
  ::xsd::cxx::tree::one< from_type > from_;
  ::xsd::cxx::tree::one< to_type > to_;
  ::xsd::cxx::tree::one< start_type > start_;
  ::xsd::cxx::tree::one< end_type > end_;
};

class type: public ::xml_schema::string
{
  public:
  enum value
  {
    linear
  };

  type (value v);

  type (const char* v);

  type (const ::std::string& v);

  type (const ::xml_schema::string& v);

  type (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const type& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_type_convert ();
  }

  protected:
  value
  _xsd_type_convert () const;

  public:
  static const char* const _xsd_type_literals_[1];
  static const value _xsd_type_indexes_[1];
};

class property: public ::xml_schema::string
{
  public:
  enum value
  {
    x,
    y,
    z,
    vx,
    vy,
    vz,
    vx1,
    vx2,
    vx3,
    vy1,
    vy2,
    vy3,
    vz1,
    vz2,
    vz3,
    ared,
    agreen,
    ablue,
    dred,
    dgreen,
    dblue,
    sred,
    sgreen,
    sblue,
    n
  };

  property (value v);

  property (const char* v);

  property (const ::std::string& v);

  property (const ::xml_schema::string& v);

  property (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  property (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  property (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  property (const property& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual property*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  property&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_property_convert ();
  }

  protected:
  value
  _xsd_property_convert () const;

  public:
  static const char* const _xsd_property_literals_[25];
  static const value _xsd_property_indexes_[25];
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::sceneInterface >
scene (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::sceneInterface >
scene (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::sceneInterface >
scene (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::sceneInterface >
scene (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::sceneInterface >
scene (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::sceneInterface >
scene (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::sceneInterface >
scene (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::sceneInterface >
scene (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::sceneInterface >
scene (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::sceneInterface >
scene (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::sceneInterface >
scene (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::sceneInterface >
scene (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::sceneInterface >
scene (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::sceneInterface >
scene (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SCENE_HXX
